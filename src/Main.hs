{-# LANGUAGE FlexibleContexts, TemplateHaskell #-}

module Main where

import qualified Data.Map as M

import Control.Lens hiding (snoc)

import Test.Rufous
import Test.Rufous.Generate
import Test.Rufous.TH
import Test.Rufous.Profile

import Language.Haskell.TH

p = 
   Profile 
      { _operationWeights=M.fromList [("snoc", 1/2), ("empty", 1/2)]
      , _persistentApplicationWeights=M.fromList [("snoc", 1/2), ("empty", 1/1)]
      , _mortality=1/2
      }

class QueueADT q where
   snoc :: a -> q a -> q a
   empty :: q a

instance QueueADT [] where
   snoc x xs = xs ++ [x]
   empty     = []

makeRufousSpec ''QueueADT

main :: IO ()
main = do
   print _QueueADT -- generated by TH
   let genState = emptyState _QueueADT p
   putStrLn $ pprintGenState genState
   inflated <- inflate genState
   putStrLn $ pprintGenState inflated
   deflated <- deflate inflated
   putStrLn $ pprintGenState deflated
   print $ deflated
